"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var rmoas_types_1 = require("../rmoas.types");
var find_schema_definition_1 = __importDefault(require("./find-schema-definition"));
/**
 * Retrieves the schema of the first media type defined in the `content` of the path operation or returns the reference
 * if there's no Request Body Object.
 *
 * If the reference pointer looks like a `requestBodies` reference, then we also do a lookup for the actual schema.
 *
 * @deprecated
 * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#fixed-fields-8}
 * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.1.0.md#fixed-fields-8}
 * @param operation Operation to look for a primary requestBody schema in.
 * @param api The API definition that this operation exists within.
 */
function getSchema(operation, api) {
    try {
        if ((0, rmoas_types_1.isRef)(operation.requestBody)) {
            if (operation.requestBody.$ref.match(/^#\/components\/requestBodies\/.*$/)) {
                return getSchema({
                    requestBody: (0, find_schema_definition_1["default"])(operation.requestBody.$ref, api)
                });
            }
        }
        var requestBody = operation.requestBody;
        if (requestBody.content) {
            var type = Object.keys(requestBody.content)[0];
            return {
                type: type,
                schema: requestBody.content[type]
            };
        }
        return {
            type: 'application/json',
            schema: requestBody
        };
    }
    catch (e) { } // eslint-disable-line no-empty
    return undefined;
}
exports["default"] = getSchema;
